---
import Hero from "./hero/hero.astro";
import ButtonAlt from "./ui/buttonAlt.astro";
import { getCollection } from "astro:content";
import "@styles/blog.less";
import { Image } from "astro:assets";

const genres = [
  "deathcore",
  "metalcore",
  "death-metal",
  "gothic",
  "power-metal",
  "progressive-metal",
];

const collections = await Promise.all(
 genres.map((genre) => getCollection(genre))
);

// Combine all posts into a single array
const posts = collections.flatMap((collection, index) =>
collection.map((post) =>({
  ...post,
  data:{ ...post.data, genre: genres[index]}
})));

// Sort the combined posts by band name
// posts.sort((a, b) => a.data.band.localeCompare(b.data.band));

const uniquePosts = posts.filter((post, index, self) =>
  index === self.findIndex((p) => p.data.band === post.data.band)
);

uniquePosts.sort((a,b) => a.data.band.localeCompare(b.data.band))
console.log(uniquePosts);
---

<!-- ============================================ --><!--                    Blog                      --><!-- ============================================ -->
<Hero/>
<section id="blog-1289">
  <div class="max-w-screen-xl mx-auto">
    <h2 class="text-left text-4xl mb-4">Genres</h2>
    <div class="cs-container mt-8">
      <div class="mt-8">
       <div class="flex flex-wrap gap-4">
        <!-- ------ Metal --------  -->
        <ButtonAlt title="Death Metal" link="/death-metal"/>
        <ButtonAlt title="Black Metal" link="/black-metal"/>
        <ButtonAlt title="Symphonic Metal" link="/symphonic-metal"/>
        <ButtonAlt title="Progressive Metal" link="/progressive-metal"/>
        <ButtonAlt title="Thrash Metal" link="/thrash-metal"/>
        <ButtonAlt title="Gothic Metal" link="/gothic"/>
        <ButtonAlt title="Power Metal" link="/power-metal"/>
        <ButtonAlt title="Folk Metal" link="/folk-metal"/>
         <!-- ------ Core  --------  -->
        <ButtonAlt title="Deathcore" link="/deathcore"/>
        <ButtonAlt title="Metalcore" link="/metalcore"/>
        <ButtonAlt title="Hardcore" link="/mathcore"/>
       </div>
      </div>
    </div>
  </div>
</section>


<div class="blog-container main-content-wrapper">
  <!--Main content -->
  <div class="main-content">
    <!-- ============================================ -->
    <!--                 Blog Articles                -->
    <!-- ============================================ -->
     <div class="flex flex-row flex-wrap gap-2 m-4">

    
    {uniquePosts.length === 0 && <h1>No Recent uniquePosts</h1>}
    {
      uniquePosts.length >= 1 &&
        uniquePosts.map((post) => (
         <div class="sm:max-w-xs lg:max-w-md m-4 mx-auto">
           <article class="recent-articles flex-1">
            {/* <picture class="blog-mainImage">
              <Image
                src={post.data.image}
                alt={post.data.imageAlt}
                width="795"
                height="400"
                decoding="async"
                loading="lazy"
              />
            </picture> */}

            <div class="article-group interview">
              <div class="blog-authorGroup">
              </div>
              <h2 class="blog-h1 uppercase">{post.data.band}</h2>
              {/* <p class="blog-h1">{post.data.genre}</p> */}
              <a href={`/${post.data.genre}/${post.slug}`} class="blog-link">
                View Band Info
              </a>
            </div>
          </article>
         </div>
        ))
    }
     </div>
  </div>
</div>
<style>
  /* Mobile - 360px */
  @media only screen and (min-width: 0rem) {
    #blog-1289 {
      padding: var(--sectionPadding);

      .cs-container {
        width: 100%;
        /* changes to 1280px at tablet */
        max-width: (550/16rem);
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        /* 48px - 64px */
        gap: clamp(3rem, 6vw, 4rem);
      }

      .cs-content {
        /* set text align to left if content needs to be left aligned */
        text-align: left;
        width: 100%;
        display: flex;
        flex-direction: column;
        /* centers content horizontally, set to flex-start to left align */
        align-items: center;
        margin: 0 auto;
      }

      .cs-flex-group {
        /* prevents flexbox from squishing it */
        flex: none;
      }

      .cs-link {
        min-width: 300px;
      }
      .cs-color {
        color: var(--primary);
      }
      .cs-card-group {
        padding: 0;
        margin: 0;
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        /* 16px - 20px */
        gap: clamp(1rem, 2vw, 1.25rem);
      }

      .cs-item {
        list-style: none;
        grid-column: span 12;

        &:hover {
          .cs-picture {
            &:before {
              opacity: 0.7;
            }

            img {
              transform: scale(1.2);
              filter: grayscale(1);
            }
          }

          .cs-h3 {
            text-decoration: underline;
          }
        }
      }

      .cs-highlight {
        .cs-flex {
          display: flex;
          flex-direction: column;
          align-items: flex-start;
          gap: (16/16rem);
        }
      }

      .cs-link {
        text-decoration: none;
        display: flex;
        flex-direction: column;
        align-items: stretch;
        gap: (16/16rem);
      }

      .cs-picture {
        width: 100%;
        /* 200px - 270px */
        height: clamp(12.5rem, 25vw, 16.875rem);
        border-radius: (16/16rem);
        /* clips the corners of the img tag */
        overflow: hidden;
        display: block;
        position: relative;
        z-index: 1;

        &:before {
          content: "";
          width: 100%;
          height: 100%;
          background: #000;
          opacity: 0;
          position: absolute;
          display: block;
          top: 0;
          left: 0;
          z-index: 2;
          transition: opacity 0.3s;
        }

        img {
          width: 100%;
          height: 100%;
          object-fit: cover;
          position: absolute;
          top: 0;
          left: 0;
          transition: transform 0.65s, filter 0.4s;
        }
      }

      .cs-date {
        font-size: (16/16rem);
        line-height: 1.5em;
        text-align: left;
        font-weight: 700;
        margin: 0;
        color: var(--bodyTextColor);
        display: block;
      }

      .cs-h3 {
        /* 20px -25px */
        font-size: clamp(1.25rem, 2.2vw, 1.5625rem);
        line-height: 1.2em;
        font-weight: 700;
        margin: 0;
        color: var(--headerColor);
      }

      .cs-item-text {
        /* 14px - 16px */
        font-size: clamp(0.875rem, 1.5vw, 1rem);
        line-height: 1.5em;
        text-align: inherit;
        margin: 0;
        color: var(--bodyTextColor);
        display: block;
      }
    }
  }

  /* Tablet - 768px */
  @media only screen and (min-width: 48rem) {
    #blog-1289 {
      .cs-container {
        /* max-width: (1280/16rem); */
        max-width: 1280px;
        margin: 0 auto;
      }

      .cs-content {
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        gap: (48/16rem);
      }

      .cs-title {
        margin: 0;
      }

      .cs-flex-group {
        width: 50%;
      }

      .cs-item {
        grid-column: span 4;
      }
      .cs-link {
        min-width: 285px;
      }

      .cs-highlight {
        grid-column: span 12;
        .cs-link {
          flex-direction: row;
          align-items: stretch;
        }

        .cs-flex {
          align-self: center;
        }

        .cs-picture {
          /* 300px - 400px */
          min-height: clamp(18.75rem, 35vw, 25rem);
          height: auto;
          width: 50%;
          /* prevents flexbox from squishing it */
          flex: none;
        }

        .cs-h3 {
          /* 25px - 39px */
          font-size: clamp(1.5625rem, 3vw, 2.4375rem);
        }
      }
    }
  }

  @media only screen and (min-width: 80rem) {
    .cs-link {
      min-width: 420px !important;
    }
  }
</style>
